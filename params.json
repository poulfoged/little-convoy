{"name":"LittleConvoy","tagline":"LittleConvoy is meant as a drop-in replacement for your existing JsonP requests that provides progression callbacks","body":"<img src=\"https://raw.github.com/poulfoged/little-convoy/master/graphics/LittleConvoy%20Logo.png\" />\r\n\r\n*Drop-in replacement for your existing JsonP requests that provides progression callbacks.*\r\n\r\nIntroduction\r\n------------\r\nWhen performing cross-server JSONP requests today, there is little feedback on progress, timeouts and other errors.\r\nAlso there is limits to the amount of data that can be send when it all has to be packed into the request querystring.\r\n\r\nThis library provides server requests via real posts to a hidden frame and uses HTTP/1.1 chunked transfer encoding to\r\nprovide progression events duing send.\r\n\r\nRequirements\r\n------------\r\n* .NET 4.0+ (reporting via HTTP available via `LittleConvoyActionAttribute` class)\r\n* ASP.NET MVC 3+\r\n\r\nHow To Use\r\n----------\r\n**First**, specify LittleConvoy as a dependency:\r\n\r\nPM> Install-Package LittleConvoy\r\n\r\n**Second**, take your exiting JSON emitting controller methods and decorate them with this attribute:\r\n\r\n```csharp\r\nusing LittleConvoy.TestSite.Utilities;\r\n\r\nnamespace LittleConvoy.TestSite.Controllers\r\n{\r\n  public class DemoController : Controller\r\n  {\r\n    [LittleConvoyAction(StartPercent = 0)]\r\n    public ActionResult Echo(object source)\r\n    {\r\n      return new JsonNetResult {Data = source, JsonRequestBehavior = JsonRequestBehavior.AllowGet};\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAfter that add the client to your project (included in the package) via require or by including build/client.js\r\nand calling it from JavaScript:\r\n\r\n```javascript\r\nnew clientLib.LittleConvoy.Client('HiddenFrame').send({ url: 'http://littleconvoy.devchamp.com/demo/echo', delay: 0 }, { Hello: 'World'})\r\n  .progressed(function (progress) {\r\n      console.log('Progress from server: ' + progress + '%');\r\n    })\r\n    .then(function (data) {\r\n      console.log('Done, recieved data: ' + data)\r\n   })\r\n    .catch(function (message) {\r\n      return alert('unable to contact server:\\n' + message);\r\n    });\r\n```\r\n\r\nThe string 'HiddenFrame' is the selected transport, only HiddenFrame is available for now.\r\n\r\nNote that the default number of progression callbacks is 10. Hello world is the data that is send to the server. \r\n\r\nPOST/GET method can be specified, default is POST.\r\n\r\nThe Library contains a small Promise library which can easy be converted to the promise lib of your choice. The dealy parameter can be used for \r\ndebugging purposes, adding a number of milliseconds on the server side for each request.\r\n\r\nKnown limitations\r\n-----------------\r\n* Only works in Internet Explorer 10+ for now, 8 & 9 is work in progress.\r\n* There is a ~600 bytes overhead compared to classic JSONP requests \r\n* The send request with the chunked http is a hack in the ASPNET MVC pipeline, so if you are using other custom MVC filters they may fail. \r\nThat said, Microsoft Internet Information Server does not seem to care and any pipeline modules like gzip/deflate compression still works.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}